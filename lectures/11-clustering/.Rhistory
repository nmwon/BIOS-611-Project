specification
spectacle_paragraphs.csv
spectacle
library(tidyverse);
spectacle  <- read_csv("source_data/spectacle_paragraphs.csv") %>%
    mutate(paragraph=paragraph %>%
               str_trim() %>%
               str_to_lower() %>%
               str_replace_all("[^a-z']","") %>%
               str_trim();
           );

"
"
1+1
library(tidyverse);
spectacle  <- read_csv("source_data/spectacle_paragraphs.csv") %>%
    mutate(paragraph=paragraph %>%
               str_trim() %>%
               str_to_lower() %>%
               str_replace_all("[^a-z]","") %>%
               str_trim();
           );

library(tidyverse);
spectacle  <- read_csv("source_data/spectacle_paragraphs.csv") %>%
    mutate(paragraph=paragraph %>%
               str_trim() %>%
               str_to_lower() %>%
               str_replace_all('[^a-z]',"") %>%
               str_trim();
           );

spectacle
spectacle
spectacle
spectacle
all_words <- spectacle$paragraphs %>% paste(collapse=" ") %>% str_split() %>% table()
all_words <- spectacle$paragraphs %>% paste(collapse=" ") %>% str_split(" ") %>% table()
all_words <- spectacle$paragraph %>% paste(collapse=" ") %>% str_split(" ") %>% table()
all_words
spectacle
all_words <- spectacle$paragraphs %>% paste(collapse=" ") %>% str_split(" ") %>% table()
all_words <- spectacle$paragraph %>% paste(collapse=" ") %>% str_split(" ") %>% table()
all_words
sort(all_words)
sort(all_words, decreasing=T)
all_words[all_words<=406 & all_words >= 10]
length(all_words[all_words<=406 & all_words >= 10])
informative_words
x <- c(1,2,3)
x[:]
spectacle
observations
names(informative_words)
seq(nrow(spectacle))
observations
observations_wide
table(spectacle$header)
observations
observations %>% filter(count==2)
observations_wide
pivot_wider
?pivot_wider
informative_words_zero
observations_wide
observations_wide
observations
observations %>% filter(count!=0)
observations %>% filter(count!=0)
observations %>% filter(count=0)
observations %>% filter(count==0)
observations_wide
observations_wide %>% filter(above!=0)
spectacle %>% mutate(n=length(paragraph))
spectacle %>% mutate(n=str_len(paragraph))
spectacle %>% mutate(n=str_length(paragraph))
spectacle %>% mutate(n=str_length(paragraph)) %>% arrange(desc(n))
spectacle
summary(result)
summary(results)
summary(results)$clusters
summary(results)$cluster
summary(km.res)
summary(km.res)
km.res$cluster
sum(c(1,2,3))
sum(table(c(1,2,3)))
x <- table(c(1,2,3))
x
x %>% as.numeric()
sum(x %>% as.numeric())
no
tsne.results
vectors
observations_wide
?sort
cc
vectors
vectors[cc,]
observations_wide %>% summarize(m=median(count), s=sd(count))
observations_wide
observations_wide %>% summarize_at(across(about:), mean)
observations_wide %>% summarize_at(across(about:absolute), mean)
observations_wide %>% summarize_at(across(about:absolute, mean))
observations %>% group_by(word) %>% summarize(m=median(count), s=sd(count))
observations %>% group_by(word) %>% summarize(m=median(count), s=sd(count)) %>% arrange(desc(s))
observations %>% group_by(word) %>% summarize(m=mean(count), s=sd(count)) %>% arrange(desc(s))
word_info <- observations %>% group_by(word) %>% summarize(m=mean(count), s=sd(count)) %>% arrange(desc(s))
ggplot(word_info, aes(m,s)) + geom_point()
ggplot(word_info, aes(m,s)) + geom_point() + coord_equal()
word_info
observations
observations
shannon(c(1,1,1,2,2,2))
shannon(c(1,1,1,1,1,1))
shannon(c(1,1,1,1,2,1))
shannon(c(1,1,1,1,2,1))
word_info
ggplot(word_info, aes(e)) + geom_density()
word_info %>% arrange(desc(e))
word_info %>% arrange((e))
word_info
print(word_info,n=100)
print(word_info %>% arrange(desc(e)),n=100)
ggplot(word_info, aes(m,e)) + geom_point()
vectors
observations
observations_wide
observations_wide
observations_wide
observations_wide$spectacal_sectr
observations_wide$spectacal_sector
observations_wide
observations_wide$spectacle_sector
spectical
observations_wide
observations_wide$spectacle_sector
names(observations_wide)_
names(observations_wide)
observations_wide
observations_wide$spectacle_sector
observations_wide %>% arrange(paragraph) %>% pull(spectacle_sector)
read_csv("voltages.csv")
results
results
voltages_ex
label_centers
label_centers
voltages
label_centers
results$centers
results %>% t()
results$centers %>% t()
t
t
cc %>% as_tibble()
?as_tibble
cc
cc
install.packages("gridArrange")
yes
yes
install.packages("gridExtra")
cc
p2
p2
library(gridExtra)
cluster_centers
tail(cluster_centers)
table(sprintf("%d:%d",c(1,2,3), c(3,1,2)))
prob_table(c(1,2,3,4))
prob_table(c(`1`,`2`,`3`,`4`))
prob_table(c(`1`,`2`,`3`,`4`))
prob_table(c("a","b","c","d"))
table(c(1,2,3,4))
n <- names(table(c(1,2,3,4)))
n
prob_table(c("a","b","c","d"))
prob_table(c("a","b","c","d"))
prob_table(c("a","b","c","d"))
prob_table(c("a","b","c","d"))
prob_table(c("a","b","c","d"))
sprintf("%d",1)
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information <- function(a,b){
    abt <- prob_table(sprintf("%d:%d",a,b));
    at <- prob_table(sprintf("%d",a));
    bt <- prob_table(sprintf("%d",a));
    for(i in seq(length(a))){
        for(j in seq(length(b))) {
            pab <- abt[sprintf("%d:%d",i,j)];
            mi <- mi + pab*log(pab/(sprintf("%d",i)*sprintf("%d",j)));
        }
    }
    mi
}
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
mutual_information(c(1,2,3,4), c(4,3,2,1))
r <- mutual_information(c(1,2,3,4), c(4,3,2,1))
r
r
r <- mutual_information(c(1,2,3,4), c(4,3,2,1))
r
r <- mutual_information(c(1,2,3,4), c(4,3,2,1))
r
r
r <- mutual_information(c(1,2,3,4), c(4,3,2,1))
r
?full_join
a <- c(1,2,3,4)
b <- c(4,3,2,1)
    p_ab <- tibble(a=a,b=b) %>% group_by(a,b) %>% tally() %>%
        mutate(p_ab=n/nrow(.));
    p_a <- tibble(a=a) %>% group_by(a) %>% tally() %>% mutate(p_a=n/nrow(.));
    p_b <- tibble(b=b) %>% group_by(b) %>% tally() %>% mutate(p_b=n/nrow(.));
    cross <- p_a %>% full_join(p_b)
cross
    p_a$dummy = 1;
    p_b$dummy = 1;
    cross <- p_a %>% full_join(p_b,by=c("dummy")) %>% select(-dummy);
cross
    cross <- p_a %>% full_join(p_b,by=c("dummy")) %>% select(-dummy) %>% left_join(p_ab, by=c("a","b"))
cross
mutual_information(a,b)
mutual_information(sample(c(1,2,3), 100, replace=TRUE),sample(c(1,2,3), 100, replace=TRUE))
mutual_information <- function(a,b){
    p_ab <- tibble(a=a,b=b) %>% group_by(a,b) %>% tally() %>%
        mutate(p_ab=n/nrow(.));
    p_a <- tibble(a=a) %>% group_by(a) %>% tally() %>% mutate(p_a=n/nrow(.));
    p_b <- tibble(b=b) %>% group_by(b) %>% tally() %>% mutate(p_b=n/nrow(.));
    p_a$dummy = 1;
    p_b$dummy = 1;
    cross <- p_a %>% full_join(p_b,by=c("dummy")) %>%
        select(-dummy) %>% right_join(p_ab, by=c("a","b"));
    sum(cross$pab*log(cross$pab/(cross$p_a*cross$p_b)))
        
}
mutual_information(sample(c(1,2,3), 100, replace=TRUE),sample(c(1,2,3), 100, replace=TRUE))
mutual_information(sample(c(1,2,3), 100, replace=TRUE),sample(c(1,2,3), 100, replace=TRUE))
mutual_information(sample(c(1,2,3), 100, replace=TRUE),sample(c(1,2,3), 100, replace=TRUE))
s <- sample(c(1,2,3), 100, replace=TRUE)
mutual_information(s,s)
mutual_information(s,s)
install.packages("infotheo")
library(infotheo)
mutinformation(s,s)
s
s2 <- sample(c(1,2,3), 100, replace=TRUE)
mutinformation(s,s2)
data(USArrests)
  dat<-discretize(USArrests)
  #computes the MIM (mutual information matrix)
  I <- mutinformation(dat,method= "emp")
  I2<- mutinformation(dat[,1],dat[,2])
dat
ce(s,s)
ce(s,s)
ce(s,s)
table(s)
ce(s,s)
ce(s,s2)
install.packages("aricode")
aricode::NMI(s,s)
aricode::NMI(s,s2)
cluster_centers
results$cluster
aricode::NMI
mutinformation
s1
s
entropy(s)
entropy(s2)


shannon(s1)
shannon(s)
shannon(s2)
shannon(sprintf("%d:%d",s,s2))
shannon(sprintf("%d:%d",s2,s2))
shannon
mutinf(s,s)
mutinf(s,s2)
normalized_mutinf(s,s2)
normalized_mutinf(s,s)
results$clusters
install.packages("ppclust")
fcm
results
names(results)
results$cluster
results
names(results)
results$u
results$v
voltages_wide
names(voltages_wide)
pmax(results$v)
results$v %>% as_tibble(rownames="cluster")
results$v
dim(voltages_matrix)
?max
?fcm
results$u
results$u
cluster
results
